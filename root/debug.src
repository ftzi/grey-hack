import_code("/root/c.src")
Compile.selfCompile()

import_code("/root/utils/program")
import_code("/root/utils/fs")

Debug = {}
Debug.Result = {
    "file": null,
    "line": null,
    "lineContent": null,
    "error": null,
}
// @param {string} entryFilePath
// @param {number} targetLineNumber
// @return {Debug.Result}
Debug.findLine = function (entryFilePath, targetLineNumber)
    entryFilePath = entryFilePath.ensureSuffix(".src").absolutePath()
    if (targetLineNumber < 1) then throw("The target line must be greater than 0.")

    state = {}
    state.totalLineCount = 0

    // NOTE: lines with import_co... are removed by GreyHack.
    recursive = function(filePath)
        fileContent = Fs.read(filePath)
        importsInFile = 0
        currentFileLineCount = 0
        for line in fileContent.split(LF)
            importPath = line.valueBetween("import_cod"+"e(""", """")
            if importPath then
                importsInFile = importsInFile + 1
                result = recursive(importPath.ensureSuffix(".src"))
                if (result) then return result
                continue
            end if

            state.totalLineCount = state.totalLineCount + 1
            currentFileLineCount = currentFileLineCount + 1
            // print("$) $".f(state.totalLineCount, line))

            if (state.totalLineCount == targetLineNumber) then
                result = new Debug.Result
                result.filePath = filePath
                result.line = currentFileLineCount + importsInFile
                result.lineContent = line
                return result
            end if
        end for
    end function

    result = recursive(entryFilePath)

    if (result) then return result
    result = new Debug.Result
    result.error = "Target line $ is greater than the total line count ($).".f(targetLineNumber.bold, state.totalLineCount.bold)
    return result
end function

Debug.main = function ()
    program = Program.New
    program.argument("srcFile", "The main program")
    program.argument("targetLine", "The line number to find the corresponding source file which raised the runtime error.").number
    program.parse()

    result = Debug.findLine(program.args.srcFile, program.args.targetLine)
    if (result.error) then
        throw(result.error)
    end if
    print("Found the line $ at $@$ with the content:".f(program.args.targetLine.bold, result.filePath.bold, result.line.bold).color("green"))
    print(""""+result.lineContent.trim.italic.bold+"""")
end function

if (Consts.programName == "debug") then Debug.main()
