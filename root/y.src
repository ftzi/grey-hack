// Main hacking tool. Eithers run remotely using an IP or locally for local exploits.
import_code("/root/c.src")
Compile.selfCompile()

import_code("/root/utils/obj")
import_code("/root/utils/program")
import_code("/root/utils/remote")
import_code("/root/utils/csv")

Y = {}
Y.main = function ()
    if not get_shell.host_computer.is_network_active then exit("No internet access.")

    program = Program.New("Hacks stuff!")
    program.option("-s", "Only scan the IP")
    program.option("-p <port>", "Port to attempt to hack").number.default(0)
    program.option("-u <targetUser>", "The user to attempt to get the credentials").default("root")
    program.argument("ipOrLibName", "IP address or library name").default()
    program.argument("lanIp", "Extra arguments to pass to the library").default("")
    program.parse()

	clear_screen()
    print("> $ $".f(Consts.programName, params.join(" ")).LF)

    port = program.opts.p
	remote = null
    ip = ifThenElse(is_valid_ip(program.args.ipOrLibName), program.args.ipOrLibName, null)
    objs = Objs.New(ip)

	if (ip) then
		remote = Remote.New(program.args.ipOrLibName)
        remote.print()
    	objs.addBatch(remote.lib, program.args.lanIp)
	else
        localLibName = "init.so" // TODO cycle through them automatically if none is specified.
        // Should get their versions and prefer the ones we have addresses for.
		lib = Lib.metaxploit.load("/lib/"+localLibName)
        objs.addBatch(lib, program.args.lanIp)
	end if

    objs.print()
	objs.handleInput(remote)
end function

Y.main()
