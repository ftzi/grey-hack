Adrs = {}
Adrs._addresses = null
Adrs._filePath = "/root/data/addresses.csv"

// @return {map}
Adrs._loadSaved = function ()
    addresses = Csv.read(Adrs._filePath)
    if not addresses then
        print("Couldn't find any saved addresses.")
        return {}
    end if
    obj = {}
    for address in addresses
        libName_version = address["libName@version"].split("@")
        obj.set([libName_version[0], libName_version[1]], address.addresses[1:-1].split(","))
    end for
    return obj
end function

Adrs.addresses = function ()
    if (Adrs._addresses == null) then Adrs._addresses = Adrs._loadSaved()
    return Adrs._addresses
end function

Adrs.hasLocalAddressesFor = function (libOrLibName, version)
    libName = libOrLibName
    version = version
    if (libOrLibName isa map) then
        libName = libOrLibName.lib_name
        version = libOrLibName.version
    end if
    return Adrs.addresses.get([libName, version]) != null
end function

Adrs.scan = function (lib)
    print("Scanning Addresses for <b>$ $</b> using Metaxploit $.".f(lib.lib_name, lib.version, Lib.versionOf("metaxploit")))
    addresses = Lib.metaxploit.scan(lib)
    print("Adding new addresses for $ $ to $".f(lib.lib_name, lib.version, Adrs._filePath))
    data = {"libName@version": lib.lib_name + "@" + lib.version, "addresses": addresses.toString}
    Csv.writeOrdered(Adrs._filePath, ["libName@version", "addresses"], data)
    Adrs.addresses.set([lib.lib_name, lib.version], addresses)
    return addresses
end function

Adrs.addressesFor = function (libOrLibName, version)
    libName = libOrLibName
    version = version
    if (libOrLibName isa map) then
        libName = libOrLibName.lib_name
        version = libOrLibName.version
    end if

    addresses = Adrs.addresses.get([libName, version])
    if (not addresses) then addresses = Adrs.scan(libOrLibName)

    return addresses
end function
