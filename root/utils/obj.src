import_code("/root/utils/lib")
import_code("/root/utils/std")

Obj = {}
Obj.getFile = function (filePath)
	if (self.anyFile) then return goToFile(filePath, self.anyFile)
end function
Obj.getFileContent = function (filePath)
	file = self.getFile(filePath)
	if (file) then return file.get_content
end function
Obj.getUser = function ()
	return getUser(self.anyFile)
end function

newObj = function(data, address, unsecValue, extra)
	obj = new Obj
	obj.type = typeof(data)
	obj.address = address
	// The value given by the `scan_address`, to be used in `overflow` with its corresponding `address`.
	obj.unsecValue = unsecValue
	// The "* XYZ" that is shown when running `scan_address`
	obj.extra = extra
	obj.shell = null
	// A computer object this Object might point to.
	obj.computer = null
	// Any file, used to reach other files and informations.
	obj.anyFile = null
	obj.action = null

	if (obj.type == "shell") then
		obj.shell = data
		obj.computer = obj.shell.host_computer
		obj.anyFile = obj.computer.File("/")
		obj.action = @obj.actionShell
	else if (obj.type == "computer") then
		obj.computer = data
		obj.anyFile = obj.computer.File("/")
		obj.action = @obj.actionComputer
	else if (obj.type == "file") then
		obj.anyFile = data
	end if
	return obj
end function


Obj.actionComputer = function()
	while (true)
		input = user_input("Enter the path of the file to be shown or nothing to go back:\n")
		if (input == "") then return
		file = self.computer.File(input)

		if (not file.has_permission("r")) then
			print("You don't have the permission to read it")
		else if (file.is_folder) then
			print(file.get_files + file.get_folders)
		else if (file.is_binary) then
			print("File is binary, no action is possible yet.")
		else
			print(file.get_content)
		end if
	end while
end function

Obj.actionShell = function ()
	get_shell.scp(current_path + "/metaxploit.so", "/home/guest", self.shell)
	get_shell.scp(current_path + "/crypto.so", "/home/guest", self.shell)
	get_shell.scp(current_path + "/y", "/home/guest", self.shell)
	self.shell.start_terminal
end function

Objs = {}
Objs.all = []
Objs.withAction = []
Objs.withShell = []
Objs.passwd = function()
	for obj in Objs.all
	    content = obj.getFileContent("/etc/passwd")
		if (content) then return content.trim()
	end for
end function

Objs.setup = function (addresses, lib, extraArgs)
	for address in addresses
		scanResult = Lib.metaxploit().scan_address(lib, address)
		scanResult = scanResult.replace("decompiling source...\nsearching unsecure values...\n", "")
		scanResult = scanResult.replace("\n\n\n", "")

		entries = scanResult.split("\n\n")
		if entries[entries.len -1] == "" then entries.pop() // Remove last empty string

		for entry in entries
			unsecValue = entry.valueBetween("<b>", "</b>")

			print("Overflowing Address <b>" + address + "</b> with <b>" + unsecValue + "</b>")
			data = lib.overflow(address, unsecValue, extraArgs)
			print("====================")

			if (not ["computer", "shell", "file"].has(typeof(data))) then continue

			extra = (entry + "\n").valuesBetween("* ", "\n")
			obj = newObj(data, address, unsecValue, extra)
			Objs.all.push(obj)
		end for
	end for
    print(Filters.byTruthyProp("action"))
	Objs.withAction = Objs.all.filter(Filters.byTruthyProp("action"))
	// Objs.withShell = Objs.all.filter(Filters.byTruthyProp("shell"))
end function

Objs.print = function ()
	message = "Ix ADDRESS VALUE TYPE DATA"
	i = -1
	for obj in Objs.withAction
		i = i + 1
		message = message + "\n" + i + " " + obj.address + " " + obj.unsecValue + " " + obj.type

		if (obj.type == "computer") then message = message + " " + obj.getUser()
		if (obj.type == "shell") then message = message + " " + obj.getUser()
		if (obj.type == "file") then
			message = message + " " + file.path
			if (file.is_folder) then message = message + "/"
			message = message + " " + file.permissions + " " + obj.getUser()
		end if
	end for

	print(format_columns(message) + "\n")
    if (Objs.passwd) then
		print("Found passwd. Usage: p [index = 0] [-d (decipherOnly)] [-p <password>].")
        i = 0
        for line in Objs.passwd.split(char(10))
            print ("p "+i+") "+line)
            i = i + 1
        end for
        print()
	end if
end function

Objs._connectSsh = function (remote, user, password)
    shell = null
    if (remote) then
        shell = get_shell.connect_service(remote.ip, 22, user, password)
        // TODO check if port is open instead
        if (not shell or shell isa string) then
            canConnectWithShell = Objs.withShell.len != 0
            message = "Using hacked shell to login as this user."
            if (not canConnectWithShell) then message = "There is no available shell to make the indirect login."
            print("Couldn't connect with ssh: " + shell + message)
            if (canConnectWithShell) then Objs.withShell[0].shell.launch("sudo", "-s " + password)
            return
        end if
    else
        shell = get_shell(user, password)
    end if
    if (shell isa map) then shell.start_terminal else print("Could not connect via ssh to "+user+"@"+password+". Error: "+shell)
end function

Objs.inputHandler = {}
Objs.inputHandler.password = function (remote, inputParams)
    if (not Objs.passwd) then return
    decipherOnly = inputParams.has("-d")
    inputParams.delete("-d")

    indexPasswordOption = inputParams.indexOf("-p")
    password = null
    if (indexPasswordOption != null) then
        password = inputParams[indexPasswordOption + 1]
        inputParams.remove(indexPasswordOption)
        inputParams.remove(indexPasswordOption) // It's not +1 as we just removed it!
    end if

    indexEntry = inputParams.get(1, "0").to_int

    passwds = Objs.passwd.split(char(10))
    chosenPasswd = passwds[indexEntry]
    user = chosenPasswd.valueBetween(null, ":")

    if (not password) then
        print("Deciphering the password of <b>"+user+"</b>...")
        wait(0.01)
        password = Lib.crypto().decipher(chosenPasswd.valueBetween(":"))
        print("Password of <b>" + user + "</b> is <b>" + password + "</b>\n")
        if (decipherOnly) then return
    end if

    Objs._connectSsh(remote, user, password)
end function

Objs.handleInput = function (remote)
	while true
		inputParams = user_input("Enter the desired method:\n").split(" ")
		if (inputParams[0] == "p") then
            Objs.inputHandler.password(remote, inputParams)
		else
            index = inputParams[0].to_int
            if (not Objs.withAction.hasIndex(index)) then
                print("Invalid option.")
                continue
            end if

			Objs.withAction[index].action()
		end if
		print()
	end while
end function
