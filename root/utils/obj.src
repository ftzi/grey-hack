import_code("/root/utils/lib")
import_code("/root/utils/std")
import_code("/root/utils/xfile")
import_code("/root/utils/addresses")

Obj = {}
Obj.New = function(data, address, unsecValue, extra)
	obj = new Obj
	obj.type = typeof(data)
	obj.address = address
	// The value given by the `scan_address`, to be used in `overflow` with its corresponding `address`.
	obj.unsecValue = unsecValue
	// The "* XYZ" that is shown when running `scan_address`
	obj.extra = extra
	obj.shell = null
	// A computer object this Object might point to.
	obj.computer = null
	// Any file, used to reach other files and informations.
	obj.xfile = null
	obj.action = null

	if (obj.type == "shell") then
		obj.shell = data
		obj.computer = obj.shell.host_computer
		obj.xfile = XFile.New(obj.computer.File("/"))
		obj.action = @obj.actionShell
	else if (obj.type == "computer") then
		obj.computer = data
		obj.xfile = XFile.New(obj.computer.File("/"))
		obj.action = @obj.actionComputer
	else if (obj.type == "file") then
		obj.xfile = XFile.New(data)
	end if
	return obj
end function


Obj.actionComputer = function()
	while (true)
		input = user_input("Enter the path of the file to be shown or nothing to go back:".LF)
		if (input == "") then return
		file = self.computer.File(input)

		if (not file.has_permission("r")) then
			print("You don't have the permission to read it")
		else if (file.is_folder) then
			print(file.get_files + file.get_folders)
		else if (file.is_binary) then
			print("File is binary, no action is possible yet.")
		else
			print(file.get_content)
		end if
	end while
end function

Obj.actionShell = function ()
	get_shell.scp(Lib.libPath("metaxploit.so"), "/home/guest", self.shell)
	get_shell.scp(Lib.libPath("crypto.so"), "/home/guest", self.shell)
	get_shell.scp(program_path, "/home/guest", self.shell)
	self.shell.start_terminal
end function

Objs = {}
Objs.New = function (publicIp = null)
    objs = new Objs
    objs.publicIp = publicIp
    objs.all = []
    objs.withAction = []
    objs.withShell = []
    objs.withXFile = []
    return objs
end function
Objs.passwd = function()
	for obj in self.withXFile
	    return obj.xfile.contentAt("/etc/passwd")
	end for
end function
Objs.users = function ()
    users = []
    passwd = self.passwd
    if (passwd) then
        for line in passwd.trim.split(LF)
            users.addUnique(line.valueBetween(null, ":"))
        end for
    end if
end function

Objs.addBatch = function (lib, lanIp = "")
	for address in Adrs.addressesFor(lib)
		scanResult = Lib.metaxploit.scan_address(lib, address)
		scanResult = scanResult.replace("decompiling source...\nsearching unsecure values...\n", "")
		scanResult = scanResult.replace("\n\n\n", "")

		entries = scanResult.split("\n\n")
		if entries[entries.len -1] == "" then entries.pop() // Remove last empty string

		for entry in entries
			unsecValue = entry.valueBetween("<b>", "</b>")

			print("Overflowing Address <b>" + address + "</b> with <b>" + unsecValue + "</b>")
			data = lib.overflow(address, unsecValue, lanIp)
			print("====================")

			if (not ["computer", "shell", "file"].has(typeof(data))) then continue

			extra = (entry.LF).valuesBetween("* ", LF)
			obj = Obj.New(data, address, unsecValue, extra)
			self.all.push(obj)
		end for
	end for
	self.withAction = self.all.filter(Filters.byTruthyProp("action"))
	self.withShell = self.all.filter(Filters.byTruthyProp("shell"))
	self.withXFile = self.all.filter(Filters.byTruthyProp("xfile"))
end function

Objs.print = function ()
	message = "Ix ADDRESS VALUE TYPE DATA"
	i = -1
	for obj in self.withAction
		i = i + 1
		message = message.LF + i + " " + obj.address + " " + obj.unsecValue + " " + obj.type
		if (obj.type == "computer") then message = message + " "+ obj.xfile.user
		if (obj.type == "shell") then message = message + " "+ obj.xfile.user
		if (obj.type == "file") then
			message = message + " " + file.path
			if (file.is_folder) then message = message + "/"
			message = message + " " + file.permissions + " " + obj.xfile.user
		end if
	end for

	print(format_columns(message).LF)

    if (self.passwd) then
        message = "Found passwd. Usage: p [index = 0] [-d (decipherOnly)] [-p <password>].".LF
        i = 0
        for line in self.passwd.trim.split(LF)
            message = "$p $) $".f(message, i, line).LF
            i = i + 1
        end for
        print(message)
	end if
end function

Objs._connectSsh = function (user, password)
    shell = null
    if (self.publicIp) then
        shell = get_shell.connect_service(self.publicIp, 22, user, password)
        // TODO check if port is open instead
        if (not shell or shell isa string) then
            canConnectWithShell = self.withShell.len != 0
            message = "Using hacked shell to login as this user."
            if (not canConnectWithShell) then message = "There is no available shell to make the indirect login."
            print("Couldn't connect with ssh: " + shell + message)
            if (canConnectWithShell) then self.withShell[0].shell.launch("sudo", "-s " + password)
            return
        end if
    else
        shell = get_shell(user, password)
    end if
    if (shell isa map) then shell.start_terminal else print("Could not connect via ssh to "+user+"@"+password+". Error: "+shell)
end function

Objs.inputHandler = {}
Objs.inputHandler.password = function (inputParams)
    if (not self.passwd) then return
    decipherOnly = inputParams.has("-d")
    inputParams.delete("-d")

    indexPasswordOption = inputParams.indexOf("-p")
    password = null
    if (indexPasswordOption != null) then
        password = inputParams[indexPasswordOption + 1]
        inputParams.remove(indexPasswordOption)
        inputParams.remove(indexPasswordOption) // It's not +1 as we just removed it!
    end if

    indexEntry = inputParams.get(1, "0").to_int

    passwds = self.passwd.split(LF)
    chosenPasswd = passwds[indexEntry]
    user = chosenPasswd.valueBetween(null, ":")

    if (not password) then
        print("Deciphering the password of <b>"+user+"</b>...")
        wait(0.01)
        password = Lib.crypto.decipher(chosenPasswd.valueBetween(":"))
        print("Password of <b>" + user + "</b> is <b>" + password + "</b>".LF)
        if (decipherOnly) then return
    end if

    self._connectSsh(user, password)
end function

Objs.handleInput = function (remote)
	while true
		inputParams = user_input("Enter the desired method:".LF).split(" ")
		if (inputParams[0] == "p") then
            self.inputHandler.password(remote, inputParams)
		else
            index = inputParams[0].to_int
            if (not self.withAction.hasIndex(index)) then
                print("Invalid option.")
                continue
            end if

			self.withAction[index].action()
		end if
		print()
	end while
end function
