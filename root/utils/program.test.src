import_code("/root/utils/test")
import_code("/root/utils/program")
import_code("/root/try")

test "program with only help", function ()
    program = Program.New
    program.parse()
    expect(program._opts.len).toBe(1)
    expect(program.opts.h).toBe(null)

    program = Program.New
    result = try(program.parse(["-h"]))
    expect(program.opts.h).toBe(true)
    expect(fnObj.lastCalledWith[0]).toHave("Usage")
end function

test "program with boolean option", function ()
    program = Program.New
    program.option("-d", "Debug mode")
    program.parse()
    expect(program._opts.len).toBe(2)
    expect(program.opts.h).toBe(null)
    expect(program.opts.d).toBe(null)

    program = Program.New
    program.option("-d", "Debug mode")
    program.parse(["-d"])
    expect(program._opts.len).toBe(2)
    expect(program.opts.h).toBe(null)
    expect(program.opts.d).toBe(true)
end function

test "program with string options", function ()
    program = Program.New
    program.option("-i <ip>", "The IP to use")
    program.parse(["-i", "127.0.0.1"])
    expect(program.opts.i).toBe("127.0.0.1")

    // program = Program.New
    // fnObj = Test.fnObj
    // program._quit = @fnObj.fn
    // program.option("-i <ip>", "The IP to use")
    // program.parse(["-i"])
    // expect(fnObj.lastCalledWith[0]).toHave("Usage")
end function

test "program with number options", function ()
    program = Program.New
    program.option("-p <port>", "The port to use", "number")
    program.parse(["-p", "8080"])
    expect(program.opts.p).toBe(8080)
end function

Test.runTests()
