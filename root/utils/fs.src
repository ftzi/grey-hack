import_code("/root/utils/path")
import_code("/root/utils/std")
import_code("/root/utils/lib");

// @type Fs
Fs = {}
Fs.shell = get_shell
// @type {computer}
Fs.computer = get_shell.host_computer

// Returns if the file or dir at the given path exists
// @param {string} path
// @return {boolean}
Fs.exists = function (path)
    file = self.computer.File(path)
    return file != null
end function

// Returns the file. Throws if the file doesn't exist.
// @param {string} path
// @return {file}
// @throw
Fs.getFile = function (path)
    file = self.computer.File(path)
    if (not file) then throw("File not found at <b>"+path+"</b>.")
    return file
end function

// Returns the root dir File.
// @return {file}
Fs.root = function ()
    return self.getFile("/")
end function
// Returns the home dir File.
// @return {file}
Fs.home = function ()
    return self.getFile("/home")
end function

// Returns the file content. Throws if the file doesn't exist.
// @param {string} path
// @return {string}
Fs.readFile = function (path)
    return self.getFile(path).get_content()
end function

// Removes a file or directory.
// Ignores if the file doesn't exist.
Fs.remove = function (path)
    if (self.exists(path)) then
        error = self.getFile(path).delete()
        if (error) then throw("Error removing the file " + path + ": " + error)
    end if
end function

// @param {string} path
// @throw
Fs.ensureDir = function (dirPath)
    if (get_shell.host_computer.File(dirPath)) then return
    res = self.shell.host_computer.create_folder(Path.parent(dirPath), Path.filename(dirPath))
    if (res isa string) then throw("Error ensuring the dir "+dirPath+": " + res)
end function

// Creates a file with the given content. Overwrites if exists.
// Returns the created `File`.
// @return {file}
Fs.create = function (path, content)
    self.remove(path)
    filename = Path.filename(path)
    touchRes = self.computer.touch(Path.parent(path), filename)
    if (touchRes isa string) then throw("Error touching file "+path+" in create(): " + touchRes)
    file = self.computer.File(path)
    file.set_content(content) // TODO handle errors
    return file
end function

// Creates an executable at the given path with the given content.
// @return {file} - The created executable.
Fs.createExecutable = function (path, content, deleteSource = true)
    filename = Path.filename(path)
    srcFile = self.create(path+".src", content)
    buildResult = self.shell.build(srcFile.path, Path.parent(path))
    if (buildResult) then exit("Failed to build executable at "+path+": " + buildResult)
    if (deleteSource) then srcFile.delete()
    return self.getFile(path)
end function

// Creates an executable file with the content and run it. (TODO. should it?:) Deletes the created files.
Fs.autorunCode = function (path, content)
    self.create(path, content)
    outDir = Path.parent(path)
    self.shell.build(path, outDir)
    self.launch(path.remove(".src"))
end function

// @param {shell}
// @return {Fs}
Fs.New = function (shell)
    fs = new Fs
    fs.shell = shell
    fs.computer = shell.host_computer
    return fs
end function
