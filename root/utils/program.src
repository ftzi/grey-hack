// Based on https://www.npmjs.com/package/commander

import_code("/root/utils/std")

Program = {}

Program.New = function (description = "")
    program = new Program
    program.description = description
    program.args = {}
    program.opts = {}
    program._params = []
    program._arguments = []
    program._options = []
    return program
end function

Program.getUsage = function ()
    usage = ""
    usage = usage + "<b>Usage:</b> "+Consts.programName+" [options]\n\n"
    if (self.description) then usage = usage + self.description.bold.LF.LF

    // for argument in Program._arguments
    //     usage = usage + " $".f(argument)
    // end for
    // usage = usage + "\n"

    usage = usage + "Options".bold.LF
    for option in self._options
        usage = usage + " " + option.name
        if (option.valueName) then usage = usage + " "+option.valueName
        usage = usage + "    " + option.description+"\n"
    end for

    return usage
end function

Program.exitWithUsage = function ()
    exit(self.getUsage)
end function

Program.throwWithUsage = function (errorMessage)
    exit("<color=red>"+errorMessage+"\n\n"+self.getUsage()+"</color>")
end function

Program._removeDashes = function (option)
    if (option.indexOf("--") == 0) then return option[2:]
    if (option.indexOf("-") == 0) then return option[1:]
    exit("Found no dashes for the option "+option)
end function

Program._parseArguments = function ()
    for argument in self._arguments
        value = self._params.pull()

        if (value == null) then self.throwWithUsage("Argument "+argument.name+" is required.")

        if (argument.type == "number") then
            value = value.to_int
            if (value isa string) then self.throwWithUsage("Argument "+argument.name+" requires a valid number.")
        end if

        self.args[argument.name] = value
    end for
end function

// self.throwWithUsage("The option "+opt.name+" does not exist.")
Program._parseOptions = function ()
    for option in self._options
        nameNoDash = self._removeDashes(option.name)
        self.opts[nameNoDash] = null

        indexOf = self._params.indexOf(option.name)
        if (indexOf == null) then continue

        self._params.remove(indexOf)

        value = null
        if (option.type == "boolean") then
            value = true
        else
            if (not self._params.hasIndex(indexOf)) then self.throwWithUsage("Option "+option.name+" requires a value.")
            value = self._params[indexOf] // Same index as the one before got removed
            self._params.remove(indexOf)
            if (option.type == "number") then
                value = value.to_int
                if (value isa string) then self.throwWithUsage("Option "+option.name+" requires a valid number.")
            end if
        end if

        self.opts[nameNoDash] = value
    end for
end function

Program.argument = function (name, description, type = null)
    allowedTypes = ["string", "number"]
    if (type == null) then type = "string"
    if (allowedTypes.indexOf(type) == null) then
        exit("Invalid argument type "+type+". Must be one of the following: ["+Program.allowedTypes.join(", ")+"]")
    end if

    obj = {"name": name, "description": description, "type": type}
    self._arguments.push(obj)

    argument = {}
    argument.number = function ()
        obj.type = "number"
        return argument
    end function

    return argument
end function

Program.option = function (name, description)
    invalid = function ()
        exit("Invalid option name "+name+". Must be in the format ""-x"" or ""-x <value>"".")
    end function

    if (name.len < 2 or name[0] != "-") then invalid()

    splittedName = name.split(" ")
    if (splittedName.len > 2) then invalid()

    name = splittedName[0]
    valueName = null
    type = null

    if (splittedName.len == 1) then
        type = "boolean"
    else if (splittedName.len == 2) then
        type = "string"
        valueName = splittedName[1]
        if (valueName.len < 3 or valueName[0] != "<" or valueName[-1] != ">") then invalid()
    else
        invalid()
    end if

    obj = {"name": name, "valueName": valueName, "description": description, "type": type}
    self._options.push(obj)

    option = {}
    option.number = function ()
        obj.type = "number"
        return option
    end function

    return option
end function

// You can pass the params to parse, or it will use the global `params`. Useful for testing.
Program.parse = function (_params = null)
    if (not _params) then _params = params[:] // Can't _params = params in this function args
    self._params = _params
    self.option("-h", "Prints the usage.")

    self._parseOptions()
    self._parseArguments()

    if (self.opts.h) then self.exitWithUsage
end function
