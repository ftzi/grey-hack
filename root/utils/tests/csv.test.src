import_code("/root/utils/test")
import_code("/root/utils/fs")
import_code("/root/utils/Std/string")
import_code("/root/utils/csv")

test "Csv.read", function ()
    originalRead = @Fs.read
    Fs.read = function (path, _)
        return "name;age".LF+"John;25".LF+"Jane;30".LF+"Jack;35"
    end function

    data = Csv.read("")

    expect(data.len).toBe(3)
    expect(data[0]["name"]).toBe("John")
    expect(data[0]["age"]).toBe("25")
    expect(data[1]["name"]).toBe("Jane")
    expect(data[1]["age"]).toBe("30")
    expect(data[2]["name"]).toBe("Jack")
    expect(data[2]["age"]).toBe("35")

    Fs.read = @originalRead
end function

test "Csv.writeOrdered", function ()
    originalRead = @Fs.read
    originalWrite = @Fs.write

    Fs.read = function (_, _)
        return "name;age".LF+"Alpha;25".LF+"Bravo;30".LF+"Delta;35"
    end function

    state = {}
    state.content = "NOT_SET"
    Fs.write = function (path, content)
        state.content = content
    end function

    Csv.writeOrdered("", ["name", "age"], {"name": "Charlie", "age": "32"})
    expect(state.content).toBe("name;age".LF+"Alpha;25".LF+"Bravo;30".LF+"Charlie;32".LF+"Delta;35")

    Csv.writeOrdered("", ["name", "age"], [{"name": "Charlie", "age": "32"}, {"name": "0zero", "age": "31"}, {"name": "Zeta", "age": "18"}])
    expect(state.content).toBe("name;age".LF+"0zero;31".LF+"Alpha;25".LF+"Bravo;30".LF+"Charlie;32".LF+"Delta;35".LF+"Zeta;18")

    Fs.read = @originalRead
    Fs.write = @originalWrite
end function


Test.runTests()
