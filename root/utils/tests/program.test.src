import_code("/root/utils/test")
import_code("/root/utils/program")
import_code("/root/try")

// apply = function (fn, args = [])

// end function

test "program with only help", function ()
    program = Program.New
    fn = function ()
        program.parse()
    end function
    result = try(@fn)
    expect(result.error).toBe(false)
    expect(program._options.len).toBe(1)
    expect(program.opts.h).toBe(null)

    program = Program.New
    fn = function ()
        program.parse(["-h"])
    end function
    result = try(@fn)
    expect(result.error).toHave("Usage")
    expect(program.opts.h).toBe(true)
end function

test "program with boolean option", function ()
    program = Program.New
    program.option("-d", "Debug mode")
    program.parse()
    expect(program._options.len).toBe(2)
    expect(program.opts.h).toBe(null)
    expect(program.opts.d).toBe(null)

    program = Program.New
    program.option("-d", "Debug mode")
    program.parse(["-d"])
    expect(program._options.len).toBe(2)
    expect(program.opts.h).toBe(null)
    expect(program.opts.d).toBe(true)
end function

test "program with string options", function ()
    program = Program.New
    program.option("-i <ip>", "The IP to use")
    program.parse(["-i", "127.0.0.1"])
    expect(program.opts.i).toBe("127.0.0.1")

    program = Program.New
    program.option("-i <ip>", "The IP to use")
    fn = function ()
        program.parse(["-i"])
    end function
    result = try(@fn)
    expect(result.error).toHave("Usage")
end function

test "program with number options", function ()
    program = Program.New
    program.option("-p <port>", "The port to use", "number")
    program.parse(["-p", "8080"])
    expect(program.opts.p).toBe(8080)
end function

Test.runTests()
