// The game most usually doesn't handle "\n" well. It uses char(10) instead.
LF = char(10)

// Safely accesses a string by the index.
// Returns null if the index is invalid.
// @param {number} index
// @param {string|null} default
// @return {string|null}
string.get = function (index, default = null)
	if (self.hasIndex(index)) then return self[index] else return default
end function

string.fixNewLine = function ()
    self = self.replace("\n", LF)
    self = self.replace("\\n", LF)
    return self
end function

// Line Feed. Adds the newline char to the end of the string.
string.LF = function ()
    return self+LF // "\n" makes some native commands throw, like .build. Let's use char(10) as it's what's expected.
end function

string.bold = function ()
    return "<b>"+self+"</b>"
end function

string.italic = function ()
    return "<i>"+self+"</i>"
end function

string.color = function (color)
    return "<color="+color+">"+self+"</color=>"
end function

// Colors the string with the error color.
string.error = function ()
    return self.color("red")
end function

string.underline = function ()
    return "<u>"+self+"</u>"
end function

string.center=function()
    return "<align=center>"+self+"</align>"
end function

// Returns true if the string has the given substring.
// @return {number}
string.has = function (item)
	return self.indexOf(item) != null
end function

string.ensurePrefix = function (prefix)
    if (self[0:prefix.len] != prefix) then return prefix + self
    return self
end function
string.ensureSuffix = function (suffix)
    if (self[-suffix.len:] != suffix) then return self + suffix
    return self
end function
string.removePrefix = function (prefix)
    if (self[0:prefix.len] == prefix) then return self[prefix.len:]
    return self
end function
string.removeSuffix = function (suffix)
    if (self[-suffix.len:] == suffix) then return self[:-suffix.len]
    return self
end function

string.padLeft = function (length, char = " ")
    return (char * (length - self.len)) + self
end function

string.padRight = function (length, char = " ")
    return self + (char * (length - self.len))
end function

toString = function (value)
    if (value == null) then return "null"
    if (value isa string) then return value
    if (value isa number) then return ""+value
    if (value isa list) then return "["+value.join(", ")+"]"
    if (value isa map) then return "Object"
end function

string.f = function (a,b,c,d,e,f,g)
    list = [a,b,c,d,e,f,g]
    index = 0
    newStr = ""
    for char in self
        if (char == "$") then
            newStr = newStr + toString(list[index])
            index = index + 1
        else
            newStr = newStr + char
        end if
    end for
    return newStr
end function

// Removes whitespaces from both ends of the string.
string.trim = function ()
    self = self.fixNewLine()
    removables = [" ", LF]
    xHead = true
    xTail = true

    while (xHead or xTail)
        // TODO handle invalid indexes if length becomes 0
        if (removables.indexOf(self.get(0)) != null) then
            self = self[1:]
        else
            xHead = false
        end if
        if (removables.indexOf(self.get(-1)) != null) then
            self = self[:-1]
        else
            xTail = false
        end if
    end while

	return self
end function

// Returns the substring between two other substrings.
// If "" or null is given to open, it will consider the beginning of the string; index 0.
// If null is given to close, it will consider either a NewLine or the end of the string.
string.valueBetween = function (open = null, close = null)
    if (open == null) then open = ""
    self = self.fixNewLine()

    if (close == null) then
		self = self.ensureSuffix(LF)
		close = LF
	end if

	head = self.indexOf(open)
	if (head == null) then return

    tail = self.indexOf(close, head + open.len)
    if (tail != null) then return self[head + open.len:tail]
end function

// Returns all the occurrences as a list of the substrings
// between two other substrings
string.valuesBetween = function (open, close)
	array = []
	head = null
	tail = null
	while true
		head = self.indexOf(open, tail)
        if (head == null) then break
		tail = self.indexOf(close, head + open.len)
        if (tail == null) then break
		array.push(self[head + open.len:tail])
	end while

	return array
end function

// Joins the self path and the given ones with `/`.
string.join = function (a, b, c, d, e)
    paths = [a, b, c, d, e]
    for path in paths
        if (path == null) then return self
        self = self.ensureSuffix("/") + path.removePrefix("/")
    end for
    return self
end function

string.parent = function ()
    return parent_path(self)
end function

string.filename = function ()
    return self.removeSuffix("/").split("/")[-1]
end function

// If the string is not an absolute path, it will add the current path to it.
string.absolutePath = function ()
    if (self[0] != "/") then return current_path + "/" + self
    return self
end function
