// Safely gets the value of an object by passing the keys to access it.
// Pass either a string or a list of keys to deeply access it.
// Returns null if the final property is not found.
map.get = function (keys)
	if not (keys isa list) then keys = [keys]
	data = self
	for key in keys
		if (data.hasIndex(key)) then data = @data[key] else return null
	end for
	return @data
end function

map.set = function (keys, value)
    if not (keys isa list) then keys = [keys]
    data = self
    for key in keys[:-1]
        if (not data.hasIndex(key)) then data[key] = {}
        data = @data[key]
    end for
    data[keys[-1]] = value
end function

Filters = {}
Filters.byTruthyProp = function (key)
    fn = function (item)
        return (item.get(key)) != null
    end function

    return @fn
end function

// Removes the items of a list when the given function returns not-true for each item.
list.filter = function (fn)
	newList = []
	for item in self
		if (fn(item)) then newList.push(item)
	end for
	return newList
end function

//
list.sort2 = function (compareFn)
    newList = self[:]
    for i in range (0, newList.len - 1)
        for j in range(0, newList.len - 2)
            if (compareFn(newList[j], newList[j + 1]) > 0) then
                temp = newList[j]
                newList[j] = newList[j + 1]
                newList[j + 1] = temp
            end if
        end for
    end for
    return newList
end function

// Safely accesses a list item by the index.
// Returns null if the index is invalid.
list.get = function (index, default = null)
	if (self.hasIndex(index)) then return @self[index] else return default
end function

// Returns true if the list includes the given item.
// @return {number}
list.has = function (item)
	return self.indexOf(item) != null
end function

// Only adds if the list doesn't have this item yet.
list.addUnique = function (item)
    if (not self.has(item)) then self.push(item)
end function

// Deletes the first occurrence of an item in the list. Mutates that list.
list.delete = function (item)
    index = self.indexOf(item)
    if (index != null) then self.remove(index)
end function

// Transforms each item of a list by using the given function.
list.map = function (fn)
	newList = []
	for item in self
		newList.push(fn(item))
	end for
	return newList
end function

list.toString = function (spaced = false)
    if (spaced) then return "["+self.join(", ")+"]"
    return "["+self.join(",")+"]"
end function
