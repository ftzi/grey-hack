Obj = {}
Obj.getFile = function (filePath)
	if (self.anyFile) then return goToFile(filePath, self.anyFile)
end function
Obj.getFileContent = function (filePath)
	file = self.getFile(filePath)
	if (file) then return file.get_content
end function
Obj.getUser = function ()
	return getUser(self.anyFile)
end function

newObj = function(data, address, unsecValue, extra)
	obj = new Obj
	obj.type = typeof(data)
	obj.address = address
	// The value given by the `scan_address`, to be used in `overflow` with its corresponding `address`.
	obj.unsecValue = unsecValue
	// The "* XYZ" that is shown when running `scan_address`
	obj.extra = extra
	obj.shell = null
	// A computer object this Object might point to.
	obj.computer = null
	// Any file, used to reach other files and informations.
	obj.anyFile = null
	obj.action = null

	if (obj.type == "shell") then
		obj.shell = data
		obj.computer = obj.shell.host_computer
		obj.anyFile = obj.computer.File("/")
		obj.action = @actionShell
	else if (obj.type == "computer") then
		obj.computer = data
		obj.anyFile = obj.computer.File("/")
		obj.action = @actionComputer
	else if (obj.type == "file") then
		obj.anyFile = data
	end if
	return obj
end function


actionComputer = function(obj)
	while (true)
		input = user_input("Enter the path of the file to be shown or nothing to go back:\n")
		if (input == "") then return
		file = obj.computer.File(input)

		if (not file.has_permission("r")) then
			print("You don't have the permission to read it")
		else if (file.is_folder) then
			print(file.get_files + file.get_folders)
		else if (file.is_binary) then
			print("File is binary, no action is possible yet.")
		else
			print(file.get_content)
		end if
	end while
end function

actionShell = function (obj)
	get_shell.scp(current_path + "/metaxploit.so", "/home/guest", obj.shell)
	get_shell.scp(current_path + "/crypto.so", "/home/guest", obj.shell)
	get_shell.scp(current_path + "/y", "/home/guest", obj.shell)
	obj.shell.start_terminal
end function

Objs = {}
Objs.list = []
Objs.listActionable = []
Objs.passwd = null

searchPasswd = function(objs)
	for obj in objs.list
	content = obj.getFileContent("/etc/passwd")
		if (content) then return content
	end for
end function

newObjs = function (addresses, lib, extraArgs)
	objs = new Objs
	for address in addresses
		scanResult = libs.metaxploit.scan_address(lib, address)
		scanResult = scanResult.replace("decompiling source...\nsearching unsecure values...\n", "")
		scanResult = scanResult.replace("\n\n\n", "")

		entries = scanResult.split("\n\n")
		if entries[entries.len -1] == "" then entries.pop() // Remove last empty string

		for entry in entries
			unsecValue = entry.valueBetween("<b>", "</b>")

			print("Overflowing Address <b>" + address + "</b> with <b>" + unsecValue + "</b>")
			data = Lib.overflow(address, unsecValue, extraArgs)
			print("====================")

			if (not ["computer", "shell", "file"].includes(typeof(data))) then continue

			extra = (entry + "\n").valuesBetween("* ", "\n")
			obj = newObj(data, address, unsecValue, extra)
			objs.list.push(obj)
		end for
	end for

	objs.passwd = searchPasswd(objs)
	filter = function (obj)
		return obj["action"] != null
	end function
	objs.listActionable = objs.list.filter(@filter)
	return objs
end function

Objs.print = function ()
	message = "Ix ADDRESS VALUE TYPE DATA"
	i = -1
	for obj in self.listActionable
		i = i + 1
		message = message + "\n" + i + " " + obj.address + " " + obj.unsecValue + " " + obj.type

		if (obj.type == "computer") then message = message + " " + obj.getUser()
		if (obj.type == "shell") then message = message + " " + obj.getUser()
		if (obj.type == "file") then
			message = message + " " + file.path
			if (file.is_folder) then message = message + "/"
			message = message + " " + file.permissions + " " + obj.getUser()
		end if
	end for

	print(format_columns(message) + "\n")
end function


keys = {

}

Objs.handleInput = function (remote)
	while true
		input = user_input("Enter the desired method:\n")

		if (input == "p") then
			if (not self.passwd) then
				print("There is no found passwd to decipher!")
				continue
			end if

			password = libs.crypto.decipher(self.passwd.valueBetween("root:"))

			print("Password for root is <b>" + password + "</b>\n")

			shell = null
			if (remote) then
				shell = get_shell.connect_service(remote.ip, 22, "root", password)
			else
				shell = get_shell("root", password)
			end if
			if (shell isa map) then shell.start_terminal else print("Could not connect via ssh: "+shell)
		else
			objs.listActionable[input.to_int].action()
		end if
		print()
	end while
end function
